generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id
  username         String
  discriminator    String
  avatar           String?        @default("")
  accessToken      String
  refreshToken     String
  tokenVersion     Int            @default(0)
  role             Role?          @default(USER)
  verifiedSubjects Subjects[]
  nodes            RedditConfig[]
  studentTickets   Ticket[]       @relation("student")
  tutorTickets     Ticket[]       @relation("tutor")
}

model RedditConfig {
  id             Int      @id @default(autoincrement())
  clientId       String
  clientSecret   String
  username       String
  password       String
  userAgent      String
  title          String
  pmBody         String
  subreddits     String[]
  forbiddenWords String[]
  blockedUsers   String[]
  userId         String
  nodeEditors    String[]
  delay          Int      @default(60)
  creator        User     @relation(fields: [userId], references: [id])
  logs           Log[]
}

model DiscordConfig {
  id              String   @id
  name            String?
  icon            String?
  prefix          String   @default("?")
  embedImageUrl   String   @default("https://i.imgur.com/rDzblHE.gif")
  autoSwicher     Boolean  @default(false)
  autoTicket      Boolean  @default(false)
  autoReact       Boolean  @default(false)
  paymentConfigId String
  Ticket          Ticket[]
}

model Payment {
  id       Int    @id @default(autoincrement())
  name     String
  value    String
  type     String
  serverId String
}

model Order {
  id            Int         @id @default(autoincrement())
  transactionId String      @unique
  ticketId      Int?
  status        OrderStatus
  tutorId       String
  ticket        Ticket?     @relation(fields: [ticketId], references: [id])
}

model Ticket {
  id             Int           @id @default(autoincrement())
  serverId       String
  additionalInfo String        @default("")
  creatorId      String
  tutorId        String?
  budget         Int
  due            DateTime
  completed      Boolean       @default(false)
  paid           Boolean       @default(false)
  channelId      String        @default("xxx")
  type           TicketType
  subject        Subjects
  education      Education
  student        User          @relation("student", fields: [creatorId], references: [id])
  discordConfig  DiscordConfig @relation(fields: [serverId], references: [id])
  tutor          User?         @relation("tutor", fields: [tutorId], references: [id])
  transactions   Order[]
}

model Log {
  id           Int          @id @default(autoincrement())
  nodeId       Int
  message      String
  subId        String
  username     String
  subreddit    String
  pm           Boolean
  createdAt    DateTime     @default(now())
  redditConfig RedditConfig @relation(fields: [nodeId], references: [id])
}

enum Role {
  USER
  TUTOR
  ADMIN
  BOT
}

//Using Strings until Prisma Allow Enums to easily map to another value
//Alternativley we could create our own methods for this but it seems extrememly
//Tedious and annoying to 
enum Subjects {
  Maths @map("maths")
  CompSci @map("compSci")
  English @map("english")
  Chem @map("chem")
  Physics @map("physics")
  Bio @map("bio")
  Other @map("other")
}

enum TicketType {
  Homework @map("hw")
  Exam @map("exam")
  Assignment @map("assignment")
  Other @map("other")
  @@map("Type")
}

enum Education {
  University @map("uni")
  College @map("college")
  Other @map("other")
}

enum OrderStatus {
  CREATED
  PAID
}
