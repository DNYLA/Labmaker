generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id
  username       String
  discriminator  String
  avatar         String?         @default("")
  accessToken    String
  refreshToken   String
  tokenVersion   Int             @default(0)
  nextApply      DateTime?
  role           Role            @default(USER)
  subjects       Subjects[]
  nodes          RedditConfig[]
  clients ClientApplications[]
  studentTickets Ticket[]        @relation("student")
  tutorTickets   Ticket[]        @relation("tutor")
  applications   Applications[]
  logs           UserLogs[]
  notifications  Notifications[]
}

model ClientApplications {
  clientId String @id @default(uuid())
  username String
  description String
  token String @default(uuid()) //Possibbly Generate this Internally Similar to JWT where it has a payload
  scopes String[] //Convert into Enum || Currently not used so im leaving it as String[] for now
  creatorId String
  creator        User     @relation(fields: [creatorId], references: [id])
}

model RedditConfig {
  id             Int      @id @default(autoincrement())
  clientId       String
  clientSecret   String
  username       String
  password       String
  userAgent      String
  title          String
  pmBody         String
  subreddits     String[]
  forbiddenWords String[]
  blockedUsers   String[]
  userId         String
  nodeEditors    String[]
  delay          Int      @default(60)
  creator        User     @relation(fields: [userId], references: [id])
  logs           Log[]
}

model DiscordConfig {
  id                  String         @id
  name                String?
  icon                String?
  prefix              String         @default("?")
  embedImageUrl       String         @default("https://i.imgur.com/rDzblHE.gif")
  paymentConfigId     String
  ticketSystem        Boolean        @default(false)
  ordersCategory      String?
  notificationChannel String?
  tutorRole           String?
  staffRole           String?
  channelName         String         @default("Ticket-{id}")
  newMessage          String?
  acceptedMessage     String?
  deleteMessage       String?
  hideChannel         Boolean        @default(true)
  notifyUser          Boolean        @default(true)
  Ticket              Ticket[]
  Applications        Applications[]
}

model Payment {
  id       Int    @id @default(autoincrement())
  name     String
  value    String
  type     String
  serverId String
}

model Order {
  id            Int         @id @default(autoincrement())
  transactionId String      @unique
  ticketId      Int?
  status        OrderStatus
  tutorId       String
  ticket        Ticket?     @relation(fields: [ticketId], references: [id])
}

model Ticket {
  id             Int           @id @default(autoincrement())
  serverId       String
  additionalInfo String        @default("")
  creatorId      String
  tutorId        String?
  budget         Int
  due            DateTime
  completed      Boolean       @default(false)
  paid           Boolean       @default(false)
  channelId      String?
  deleted        Boolean       @default(false)
  type           TicketType
  subject        Subjects
  education      Education
  student        User          @relation("student", fields: [creatorId], references: [id])
  discordConfig  DiscordConfig @relation(fields: [serverId], references: [id])
  tutor          User?         @relation("tutor", fields: [tutorId], references: [id])
  transactions   Order[]
}

model Applications {
  id                 Int                @id @default(autoincrement())
  userId             String
  serverId           String
  applicationMessage String
  vouchesLink        String
  redditUsername     String?
  subjects           Subjects[]
  createdAt          DateTime
  reviewedAt         DateTime?
  result             ApplicationResult?
  discordConfig      DiscordConfig      @relation(fields: [serverId], references: [id])
  user               User               @relation(fields: [userId], references: [id])
}

enum ApplicationResult {
  ACCEPTED
  REJECTED
  HOLD //Probably wont get used but ill include it incase we have a use for it in the future
}

model Log {
  id           Int          @id @default(autoincrement())
  nodeId       Int
  message      String
  subId        String
  username     String
  subreddit    String
  pm           Boolean
  createdAt    DateTime     @default(now())
  redditConfig RedditConfig @relation(fields: [nodeId], references: [id])
}

model UserLogs {
  id            Int          @id @default(autoincrement())
  userId        String?      @map("user_Id") //If Not UserID=== Bot
  componentName String       @map("component_name")
  componentType String       @map("component_type")
  componentId   String?      @map("component_id") //The Attrobite OD
  ipAddress     String       @map("ip_address")
  userAgent     String       @map("user_agent") //This should help identify what BOT. (Could store JWT token aswell)
  referer       String?
  information   String?
  timestamp     DateTime     @default(now())
  numRows       Int          @default(1) @map("num_rows")
  path          String
  method        RequestType
  response      ResponseType @default(COMPLETED)
  user          User?        @relation(fields: [userId], references: [id])
}

model Notifications {
  id         Int      @id @default(autoincrement())
  fromUserId String
  toUserIds  String[] //If type === Created We Could batch it out to all users with subject Role?
  message    String
  viewed     Boolean
  hidden     Boolean
  user       User     @relation(fields: [fromUserId], references: [id])
}

enum ResponseType {
  COMPLETED
  FORBIDDEN
  GONE
  NOTFOUND
  UNAVAILBLE
  CONFLICT
}

enum RequestType {
  GET
  PUT
  POST
  DELETE
}

enum Role {
  USER
  TUTOR
  ADMIN
  SUPERADMIN
  BOT
}

enum Subjects {
  Maths      @map("maths")
  CompSci    @map("compSci")
  English    @map("english")
  Chemistry  @map("chemistry")
  Physics    @map("physics")
  Bio        @map("bio")
  Other      @map("other")
}

enum TicketType {
  Homework    @map("homework")
  Exam        @map("exam")
  Assignment  @map("assignment")
  Other       @map("other")

  @@map("Type")
}

enum Education {
  University  @map("university")
  College     @map("college")
  Other       @map("other")
}

enum OrderStatus {
  CREATED
  PAID
}
